{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "The removed deprecations were part of the lucene-wide sweep to remove all deprecated methods going from Lucene 1.9 to 2.0.... it wasn't necessary in the case of SimpleCharStream.\n\nI'm fine with this patch.",
            "date": "2006-10-20T15:25:25.000+0000",
            "id": 0
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I'm okay with this, although this might one day piss somebody off - imagine making manual changes, running the javacc task, and losing your changes.  Ouch.\n\nPerhaps you should add some <echo> and some <sleep> before removing files, to give the person a chance to cancel this.",
            "date": "2006-10-20T16:14:33.000+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "The first line of these generated files say that they are generated files though.",
            "date": "2006-10-20T16:18:23.000+0000",
            "id": 2
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Yes, but people may still play with them (e.g. to test things out quickly) and may not be familiar with the build details.\n",
            "date": "2006-10-20T16:25:32.000+0000",
            "id": 3
        },
        {
            "author": "Steven Parkes",
            "body": "Here's the text from the javacc FAQ:\n\n2.2  Can I modify the generated files?\nModifying any generated files should be generally avoided, since some day you will likely want to regenerate them and then you'll have to re-modify them.\nThat said, modifying the Token.java, ParserException.java and TokenManagerError.java files is a fairly safe thing to do as the contents of these files do not depend on the options, or the contents of the specification file, other than the package declaration. Modifying the SimpleCharStream.java (or JavaCharStream.java) file should not be done until you are certain of your options, especially the STATIC and JAVA_UNICODE_ESCAPE options.\nThe custom files (XXX.java, XXXTokenManager.java, and XXXConstants.java) are produced every time you run JavaCC. Modifying any of the custom files is generally a very bad idea, as you'll have to modify them again after any change to the specification. Some people have written scripts (in, say, Perl) to do the modifications for them. I would regard this as a very last resort.\n\nThe only reason I stumbled across this is because I was using javacc 4.0 by default and it warn/complains if you run it against  3.* genearted templates.\n\nSo I don't see a perfect answer. 4.0 people are going to get messages w/o the patch; anyone that changes the skeleton (no matter the version) are not going to like it with the patch. I doubt there are more of the former than the latter, but the results are worse for the latter.\n\nSo should I close this as invalid?",
            "date": "2006-10-30T20:39:45.000+0000",
            "id": 4
        },
        {
            "author": "Hoss Man",
            "body": "1) This patch seems to have been inlcuded in the patch to LUCENE-489 that Otis commited in r468291\n\n2) Even before this change the build.xml's clean-javacc (a dependency for javacc) was deleting most of the files built by javacc ... this patch just made the list complete, which seems like a perfectly fine idea.\n\n(if people were going to complain about loosing their manual tewaks, they would have complained about QueryParser.java or StandardTokenizer.java ... not CharStream.java)",
            "date": "2006-11-01T19:37:36.000+0000",
            "id": 5
        },
        {
            "author": "Steven Parkes",
            "body": "Dang. Sorry about that. I must have copied the build.xml in order facilitate checking the javacc results. I didn't intend to merge the issues.",
            "date": "2006-11-01T19:46:53.000+0000",
            "id": 6
        }
    ],
    "component": "core/queryparser",
    "description": "Copies of the the character stream files for javacc are checked into svn. These files were generated under javacc 3.0 (at least that's what they say, though javacc 3.2 says this too). javacc 4 complains that they are out of date but won't replace them; they must be removed before it will regenerate them.\n\nThere is one side effect of removing them: local changes are lost.  r387550 removed a couple of deprecated methods. By using the files as generated by javacc, these deprecated  methods will be readded (at least until the javacc team removes them totally). There are other changes being made to the stream files, so I woudl think it's better to live with them unmodified than to keep local versions just for this change.\n\nIf we want javacc to recreate the files, the attached patch will remove them before running javacc.\n\nAll the tests pass using both javacc3.2 and 4.0.\n\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-667",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "javacc skeleton files not regenerated",
    "systemSpecification": null,
    "version": ""
}
{
    "comments": [
        {
            "author": "Paco Avila",
            "body": "Test program",
            "date": "2006-08-07T08:22:32.000+0000",
            "id": 0
        },
        {
            "author": "Paco Avila",
            "body": "Test AccessManager implementation for this issue",
            "date": "2006-08-07T08:23:01.000+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "the real issue at hand is that Node.lock() potentially leaves inconsistent transient state. if the lock operation fails for any reason (e.g. due to lack of privileges) all changes need to be reverted.",
            "date": "2006-08-09T14:56:38.000+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "fixed in svn rev. 430067\n\nthanks for reporting this issue!",
            "date": "2006-08-09T15:07:37.000+0000",
            "id": 3
        },
        {
            "author": "Paco Avila",
            "body": "Ok, Node.lock() when fails don't save state on transient session. But why? When I try a node modification on a node where I have no permissions and perform a Node.save(), it throws a AccessDeniedException and I have to make a session.refresh(false) because the modification is in my transient session. Why in the case of lock it is different?",
            "date": "2006-08-09T16:58:23.000+0000",
            "id": 4
        },
        {
            "author": "Paco Avila",
            "body": "... Continued. A lock is a node modification adding some properties. So, if I make a lock and these properties are added in my transient session, I should make a session.refresh(false) also.",
            "date": "2006-08-09T17:00:10.000+0000",
            "id": 5
        },
        {
            "author": "Stefan Guggisberg",
            "body": "paco, please have a look at the javadoc of Node#lock:\nhttp://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Node.html#lock(boolean,%20boolean)\n\nwhich states that\n<quote>\n[...] If successful, then the property jcr:lockOwner is created and set to the value of Session.getUserID for the current session and the property jcr:lockIsDeep is set to the value passed in as isDeep. These changes are persisted automatically; there is no need to call save. [...]\n</quote>\n\nthe lock operation does *not* affect transient space.",
            "date": "2006-08-10T08:35:20.000+0000",
            "id": 6
        },
        {
            "author": "Paco Avila",
            "body": "Yes, I know there is no need to call save. My attached program DummyLockAccessDenied.java doesn't call save() after the lock(). But in your added code:\n\n+ try  {\n+                // add properties to content\n+                internalSetProperty(QName.JCR_LOCKOWNER,\n+                        InternalValue.create(getSession().getUserID()));\n+                internalSetProperty(QName.JCR_LOCKISDEEP,\n+                        InternalValue.create(isDeep));\n+                save();\n+                succeeded = true;\n+            } finally {\n+                if (!succeeded) {\n+                    // failed to set lock meta-data content, cleanup\n+                    try {\n+                        lockMgr.unlock(this);\n+                        refresh(false); /******** HERE **********/\n+                    } catch (RepositoryException re) {\n+                        // cleanup failed\n+                        log.error(\"error while cleaning up after failed lock attempt\", re);\n+                    }\n+                }\n+            }\n\nyou call refresh(false), invalidating transiente session. This should be done in client code. If I want to add a property in a protected node and the operation fails on save() because lack of permissions, I have to call a refresh(false) because of invalid transient session. This is the same case, after a lock() (I don't do save()) I should catch the AccessDeniedException and make a refresh(false).",
            "date": "2006-08-10T17:05:00.000+0000",
            "id": 7
        },
        {
            "author": "Stefan Guggisberg",
            "body": "paco, please read the specification. the specification states that Node.lock() does not cause a transient modification, regardless of whether it succeeds or whether it fails.",
            "date": "2006-08-11T07:45:16.000+0000",
            "id": 8
        },
        {
            "author": "Paco Avila",
            "body": "I've reading the specification and can't find any reference to transient session in Node.lock(). Do you mean that Node.lock() don't modify transient session because it performs a Node.save() internally (there is no need to call save)? \n\nMy english is a little bad an sometimes perhaps I don't use the correct words and can't express my ideas in the rigth way.",
            "date": "2006-08-11T08:42:40.000+0000",
            "id": 9
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> I've reading the specification and can't find any reference to transient session in Node.lock(). Do you mean that Node.lock() don't modify transient session because it performs a Node.save() internally (there is no need to call save)?\n\nwhether an implementation internally calls save() is an implementation detail. \"there's no need to call save\" means that there are no transient modifications which need to be saved by the client.\n\n> My english is a little bad an sometimes perhaps I don't use the correct words and can't express my ideas in the rigth way.\n\nno problem, most committers and a lot of people on the list are non-native english speaking  ;-)",
            "date": "2006-08-11T09:00:08.000+0000",
            "id": 10
        },
        {
            "author": "Paco Avila",
            "body": "Ok, the specification is clear about Node.lock() and says that it is not neccesary to call a Node.save(). I know. But I don't know why the specification writers did this decission: a Node.lock() is very like a Node.setProperty(). Do you know what I mean? Obvious Jackrabbit is an implementatio of this especification and must follow it. \n\nI think I can close the issue, isn't it?",
            "date": "2006-08-11T10:45:22.000+0000",
            "id": 11
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> I think I can close the issue, isn't it?\n\nyes, thanks.",
            "date": "2006-08-11T11:13:40.000+0000",
            "id": 12
        },
        {
            "author": "Jukka Zitting",
            "body": "> a Node.lock() is very like a Node.setProperty().\n\nNo, not really. A \"transient lock\" makes no sense, you always want your locks to affect all sessions. The lock properties on mix:lockable nodes are more like metadata that gives you access to the current locking state of a node, not something you'd modify directly using the normal Item API.",
            "date": "2006-08-11T11:39:53.000+0000",
            "id": 13
        },
        {
            "author": "Paco Avila",
            "body": "Thanks for fixing it.",
            "date": "2006-08-11T14:08:58.000+0000",
            "id": 14
        }
    ],
    "component": "locks",
    "description": "When I try to node.lock(true, false) a node and the lock fails due to lak of user privilegies, the lock stay in the user transient session. If a perform a node.refresh(false) the node still is locked in the transient session.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-533",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "failing Node.lock() might leave inconsistent transient state",
    "systemSpecification": "UbuntuDapper",
    "version": "0.9, 1.0, 1.0.1"
}
{
    "comments": [
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9016)\nTest connection on localhost's chargen port (and echo), if open\n",
            "date": "2003-11-10T20:50:38.000+0000",
            "id": 0
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9017)\nSuggested patch for HttpMethodBase.readStatusLine\n",
            "date": "2003-11-10T20:53:47.000+0000",
            "id": 1
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9018)\nSuggested patch for HttpMethodBase.readStatusLine\n",
            "date": "2003-11-10T20:54:20.000+0000",
            "id": 2
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Please ignore attachment id=9017 (source instead of patch).\nLook at id=9018 instead.\n",
            "date": "2003-11-10T20:55:49.000+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Christian,\nCould you, please, parameterize 'maxLinesToInspect' value using HttpMethodParams\nclass and resubmit the patch?\n\nOleg ",
            "date": "2003-11-10T22:14:12.000+0000",
            "id": 4
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg, \n \nI don't think that it would be a good idea to make that a configurable \nparameter. RFC2616 states that the very first line of the response _must_ be \nthe status line (No CR or LF is allowed before that). \n \nBut I guess that you have made bad experiences with some servers, that is why \nyou have implemented the loop readStatusLine at all, haven't you? \n \nIf so, then maxLinesToInspect should be set to a reasonable, fixed value (any \nvalue between 2 and 5 should be ok), because if the loop _is_ looping, you are \nalready breaking the standard (a strict-mode check would make sense here!) \n \nIf not, we can remove the loop completely (and can forget that configurable \nparameter :-) \n \nChristian \n ",
            "date": "2003-11-11T15:47:18.000+0000",
            "id": 5
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Sooner or later somebody will request this as a configurable parameter. We have\na very wide range of users. So we will need every parameter to be configurable.",
            "date": "2003-11-11T16:33:33.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Christian,\nThe problem here is persistent HTTP/1.1 connections. Occasionally some broken\nSGI scripts report content-length value that in fact does not reflect the real\nlength of the content body sent across the wire.\n\nConsider the following:\n---------------------------\nHTTP/1.1 200 OK\nContent-Length: 5\n\nScrew you\nReally bad\nHTTP/1.1 200 OK\nContent-Length: 9\n\nOoopsie\n---------------------------\nWith the status line read loop in place HttpClient at least stands a chance of\ngraceful recovery from this kind of mishap. Unfortunately in this situation I do\nnot see an alternative to just scanning input stream for something that may (or\nmay not) happen to be a valid response line\n\nSo, it is paramount that the suggested check is off per default. Only in very\nspecial cases like yours one may choose to activate it. That's why the parameter\nis a must\n\nOleg",
            "date": "2003-11-11T17:09:10.000+0000",
            "id": 7
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9052)\nModified patch, maximum garbage lines default to Integer.MAX_VALUE\n",
            "date": "2003-11-11T17:54:48.000+0000",
            "id": 8
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9053)\nImproved testcase\n",
            "date": "2003-11-11T17:55:27.000+0000",
            "id": 9
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg, \n \ngood argument. I have attached the new patch (as well as an improved \ntestcase). \nNow, in lenient mode, the maximum number of \"garbage\" lines is \nInteger.MAX_VALUE (following your argumentation, 5 is too little). \n \nIn strict-mode, this number is set to 0 by default. \n \nIs this OK? \n \n \nChristian \n ",
            "date": "2003-11-11T17:58:44.000+0000",
            "id": 10
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg, \n \nanother idea: \n \nIn case of reusing persistent connections, wouldn't it be better to simply \nread/skip any available bytes before sending the next Request header? \n \nBecause conversation is rather like this: (+>  \n \n->> GET / HTTP/1.1 \n->> Host: www.foo.com \n->> \n-<< HTTP/1.1 200 OK \n-<< Content-Length: 5 \n-<< \n-<< ***** you \n-<< Really bad \n->> GET /bar HTTP/1.1 \n->> Host: www.foo.com \n->> \n-<< HTTP/1.1 200 OK \n-<< Content-Length: 9 \n \nBefore sending the second GET, just read the surplus \" you\\r\\nReally bad\" off \nthe stream (throw an Exception or skip it/append it to the response, according \nto strict/lenient mode). \n \nI guess that would be a cleaner handling (as the surplus \"garbage\" belongs to \nthe first method request, not to the second one). \n ",
            "date": "2003-11-11T18:39:37.000+0000",
            "id": 11
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Chris, that is very unreliable. It is not guaranteed as to WHEN packets arrive.\nAfter you have read all available data, the server may still continue sending\nmore garbage...",
            "date": "2003-11-11T18:44:55.000+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Christian,\nOdi has a point here. There is no reliable way of telling where one response\nbody ends and another one starts, if content length information is messed up.\n\nI'll review your patch and give you feedback as soon as I can. Once the patch is\napproved by at least two committers, it'll be checked in.\n\nOleg",
            "date": "2003-11-11T18:53:31.000+0000",
            "id": 13
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Agreed. \n \nIn other words, can we assume that reusing the HTTP connection is \nunreliable/should be avoided if there are more bytes available than specified \nwith Content-Length? \n \nIn this case, at least, I would suggest to close the current connection and \nopen a fresh one. \n \n \nChristian \n ",
            "date": "2003-11-11T19:25:40.000+0000",
            "id": 14
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9056)\nTestcase cleanup: Now uses HttpClient's TimeoutController\n",
            "date": "2003-11-11T20:50:17.000+0000",
            "id": 15
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9064)\nNew patch, includes surplus response data check on first request (see mailing list)\n",
            "date": "2003-11-12T18:23:28.000+0000",
            "id": 16
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9065)\nnew version of TestBadPorts\n",
            "date": "2003-11-12T18:24:06.000+0000",
            "id": 17
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9066)\nNew test: TestBadContentLength\n",
            "date": "2003-11-12T18:24:33.000+0000",
            "id": 18
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Please have a look at the latest three attachments. \n \nI have included a check for surplus response data, which now also cures \nHttpClient from mis-interpreting malicious response bodies (as discussed \nin the mailing list). \n \nPlease look at TestBadContentLength for the additional test scenario. \n \n \nChristian \n ",
            "date": "2003-11-12T18:29:54.000+0000",
            "id": 19
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Chritian,\nI am a bit stressed out right now, but I'll try to take a closer look at your\npatch tonight. There are things I would possible like to see done differently.\nFeedback to follow. \n\nBut I REALLY like your TestBadContentLength testcase. We all would greatly\nappreciate if you could look at the possibility of replacing the current\nSimpleHttpConnection based testing framework with something of based on your\napproach.\n\nOleg",
            "date": "2003-11-13T01:03:50.000+0000",
            "id": 20
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9093)\nSimple, generic HTTP Server; used TestBadContentLength as example\n",
            "date": "2003-11-13T21:27:08.000+0000",
            "id": 21
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg, \n \nthank you for compliments :) \n \nI also think that it is quite important for a HTTP client to have a bundled, \ntiny HTTP server for testing. \n \nUnfortunately, at the moment, I do not have the time to dig that deep into \nHttpClient's test cases. However, I provide a simple HTTP server framework, \nwhere you can construct the replies yourselves (anyone interested in?) \n \nBy default, the SimpleHttpServer does nothing but throwing a \"503 Service \nUnavailable\" until you extend it with your own request handlers. \n \nOne is provided in the new TestBadContentLength. Another one is a handler \nchain, where multiple handlers can be stacked up, even to very complex \nstructures (chains of chains). The chain stops on the first handler that \nwrites to the given output stream. \n \nBy the way: It is not very well tested, just give it a try. \n \n \nChristian \n ",
            "date": "2003-11-13T21:40:24.000+0000",
            "id": 22
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Christian,\nI finally found enough time to thoroughly examine your patch. While OK in\ngeneral there were a few minor details that I did not quite like:\n- Throwing a protocol exception from ResponseConsumedWatcher#responseConsumed\nwas not such a good idea after all. I think it requires too much of ugly code\nfor very little (or none at all) practical gains. In my version of the patch\nextra response content results in a warning message. No exception is thrown.\n- HTTP spec requires that HTTP agents ignore all blank lines that precede the\nresponse status line. In your patch is was not taken into consideration\n- I adjusted the new parameters to be more in line with existing parameter\nconventions in HttpClient\n\nBottom line, I did go a bit rough on your patch. Please let me know if these\nchanges are OK with you or not. If there\u00e2\u0080\u0099s something you do not quite agree\nwith, let me know\n\nI'll take a closer at your simple HTTP Server stuff a bit later. I am quite\ndetermined to replace the existing SimpleHttpConnection testing framework with a\nnew one based on your code.\n\nCheers\n\nOleg",
            "date": "2003-11-14T03:05:04.000+0000",
            "id": 23
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=9095)\nPatch (take 2)\n",
            "date": "2003-11-14T03:09:21.000+0000",
            "id": 24
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=9096)\nPatch (take 3) Contains a minor bug fix\n",
            "date": "2003-11-14T06:34:53.000+0000",
            "id": 25
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg,\n\nthank you for reviewing my patch.\n\nI think the reviewed version is OK in general (AFAICS from the diff - I haven't\napplied it yet). Just a few comments (new ideas?) by me:\n\nIn my opinion, \"strict\" mode should be very pedantic about standards compliance.\nHttpClient should notify the user wherever a problematic, non-standards\nsituation is detected.\n\nOf course, trailing whitespace should be silently ignored, but any other\ncharacters should be regarded as \"unexpected\" (is there a section in RFC 2616\nfor that? I haven't found it yet).\n\nThe question is: Is (non-whitespace) garbage following the response (caused by a\nwrong Content-Length header, for example) \"unexpected\" enough?\n\nIn your version of the patch, there is no chance to get informed about such a\nsituation - and in 'lenient' mode, the detection is disabled completely (did you\ncheck the TestBadContentLength testcase? does it pass?).\n\nRegarding the ProtocolException/ResponseConsumedWatcher thing, of course, it\n_is_ a workaround to get that Exception thrown to the caller. However, I would\nappreciate it if the user _would_ receive that Exception (somehow).\n\nI even think it is not such a bad idea to keep that in responseConsumed(), just\nto inform every HttpClient component that there was an error while reading the\nresponse (the interface is not public, anyway). Instead of throwing an\nException, we could also have a boolean \"without/with errors\" return value, of\ncourse...\n\nIn short, I would prefer the following behaviour:\n\n- For any mode: If garbage is detected, read (up to a certain limit of bytes\n\"N\") until end of garbage (maximum of N bytes) or until a non-whitespace\ncharacter is received; N is something < 10 (should be user-definable).\n\n- For any mode, close the connection (the conncetion is definitely unreliable).\n\n- For strict mode, throw a ProtocolException if anything else but whitespace has\nbeen received.\n\n- (Optionally) introduce an extra \"pedantic\" mode (inherits strict mode) and\nthrow a ProtocolException even if N bytes of _whitespace_ garbage have been\nreceived.\n\n\nBest regards,\n\nChristian",
            "date": "2003-11-17T22:00:23.000+0000",
            "id": 26
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Odi,\n\nagreed - whitespace is a wrong term. CRLF is better. \"CRLF or LF\" is correct ;-)\n(see RFC2616, section 19.3).\n\nWould you then prefer my first version of the patch, or do you have another idea\nhow to handle this?\n\nOleg: what do you think?\n\nBy the way: Could anybody give me an exact reference to a RFC 2616 section for\nthe \"official\" behaviour?\n\n\nChristian\n",
            "date": "2003-11-17T22:38:45.000+0000",
            "id": 27
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9189)\nRevised patch; please review\n",
            "date": "2003-11-19T20:09:25.000+0000",
            "id": 28
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Please have a look at the revised patch (also see mailing list discussion). \n \nI have changed Oleg's suggested \"TEST_EXTRA_INPUT\" to \"LOG_EXTRA_INPUT\" (we \nalways test but log only in strict mode), and reversed the \"-1\" to \nInteger.MAX_VALUE (terminates as opposed to the -1 solution, and saves one \ncomparison per loop cycle). \n \nMoreover, there is no difference between empty and garbage lines anymore. Both \nof them are taken into account for LOG_EXTRA_INPUT, which makes no difference \nfor lenient mode, anyway. \n \nThe suggested CRLF-only checking is simply omitted, as it would make things \njust too complicated without any advantage (the connection is closed anyway in \ncase of a wrong Content-Length header etc.). ",
            "date": "2003-11-19T20:20:59.000+0000",
            "id": 29
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Christian,\n1. Please DO NOT use System.out.println()! This is a big NO-NO in HttpClient.\nPlease use commons-logging capabilities instead\n2. Do you mind renaming LOG_EXTRA_INPUT to WARN_EXTRA_INPUT?\n3. Integer value \u00e2\u0080\u00931 used extensively throughout HttpClient to denote that an\ninteger parameter is disabled (not applicable). I would prefer this convention\nto apply to STATUS_LINE_GARBAGE_LIMIT for the consistency sake, even at the\nexpense of a few CPU cycles. \n\nOtherwise looks OK to me.\n\nOleg",
            "date": "2003-11-19T21:04:26.000+0000",
            "id": 30
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Gosh! Shame on me. This System.out.println() was left over from debugging... \nPlease remove it while I am standing in the corner. \n \nThe problem with -1 vs. Integer.MAX_VALUE is that checking is not disabled in \nthis case. It will just terminate after reading Integer.MAX_VALUE (2^31-1) \nlines, whereas -1 won't. \n \nFeel free to apply modifications, I think I can live with them :) \n \n \nChristian \n ",
            "date": "2003-11-19T21:21:08.000+0000",
            "id": 31
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "There's no need to stand in the corner. I believe none of us is a five-year-old\nhere. Apart from left-over println() statement my comments were merely hair\npicking. I leave it to your discretion to decide what changes need to be made to\nthe patch.\n\nOleg",
            "date": "2003-11-19T21:43:59.000+0000",
            "id": 32
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9191)\nFinal (?) patch\n",
            "date": "2003-11-19T21:56:54.000+0000",
            "id": 33
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=9221)\nPatch (take 6)\n",
            "date": "2003-11-21T06:05:13.000+0000",
            "id": 34
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "It turned out that Christian's patch broke 3 test cases. In fact there's nothing\nwrong with the patch itself. It is just SimpleHttpConnection stuff is too\nflacky: its isResponseAvailable method does not seem to be able to produce\ncorrect results. I worked the problem around in all three cases. \n\nIt is time we replaced SimpleHttpConnection with something a bit more robust\n\nI am +1 to commit Christian's patch\n\nOleg",
            "date": "2003-11-21T06:11:49.000+0000",
            "id": 35
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "I would just like to ask if there are any objects against the patch, or if \nOleg can commit it. \n ",
            "date": "2003-11-27T18:23:13.000+0000",
            "id": 36
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Chris, the TestBadContentLength test is now in CVS HEAD but it still fails and\nis not included in the test nohost suite. Could you take care of it please?\nCheers. Odi",
            "date": "2003-12-06T05:26:42.000+0000",
            "id": 37
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Created an attachment (id=9441)\nPatch for CVS HEAD's TestBadContentLength\n",
            "date": "2003-12-08T23:24:58.000+0000",
            "id": 38
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Odi, \n \nplease check this patch (matching HttpClient's \"old\" behaviour without the \nProtocolException suggestions). \n \n \nChristian \n ",
            "date": "2003-12-08T23:28:02.000+0000",
            "id": 39
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Christian,\nWell, I have some bad news. \n\nI was working on merging TestBadContentLength patch with the main one (Patch\n(take 6)) in order to get it prepared to be checked in into CVS trunk. When I\nreran the tests, I unfortunately discovered that several I/O exception were\nthrown that were not there before. Aparently those exceptions have been caused\nby the newer Tomcat (version 4.1.29) which appears to be dropping connection\nimmediately after having sent the response body if the 'connection: close'\nrequest header is present in the request. So what is happening is that\nHttpConnection.isResponseAvailable results in an I/O exception, as the socket is\nclosed on the server side the same moment the last response byte was sent:\n\n[ERROR] HttpMethodBase - -Unexpected I/O error when testing for extra response\ndata <java.io.IOException: Stream closed>java.io.IOException: Stream closed\n\tat java.io.PushbackInputStream.ensureOpen(PushbackInputStream.java, Compiled Code)\n\tat java.io.PushbackInputStream.available(PushbackInputStream.java:238)\n\tat\norg.apache.commons.httpclient.HttpConnection.isResponseAvailable(HttpConnection.java:863)\n\tat\norg.apache.commons.httpclient.HttpMethodBase.responseBodyConsumed(HttpMethodBase.java:2263)\n\tat\norg.apache.commons.httpclient.HttpMethodBase$1.responseConsumed(HttpMethodBase.java:1765)\n\tat\norg.apache.commons.httpclient.AutoCloseInputStream.notifyWatcher(AutoCloseInputStream.java,\nCompiled Code)\n\tat\norg.apache.commons.httpclient.AutoCloseInputStream.checkClose(AutoCloseInputStream.java,\nCompiled Code)\n\tat\norg.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java,\nCompiled Code)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:90)\n\tat\norg.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java:161)\n\tat\norg.apache.commons.httpclient.HttpMethodBase.getResponseBody(HttpMethodBase.java,\nCompiled Code)\n\tat\norg.apache.commons.httpclient.HttpMethodBase.getResponseBodyAsString(HttpMethodBase.java:740)\n\tat\norg.apache.commons.httpclient.TestMethodsLocalHost.testMethodsGet(TestMethodsLocalHost.java:174)\n\t\nThis is of course a fringe case, but the whole idea of having\nHttpConnection.isResponseAvailable was to make HttpClient more reliable, and not\nless reliable. We clearly overlooked this scenario.\n\nIn Java prior to version 1.4 there is no way to test if the socket has been\nclosed on the other side, so using Socket#isClosed is not an option. I am afraid\nHttpMethodParams.WARN_EXTRA_INPUT stuff must be completely removed. \n\nThe offending code needs to be removed, and the whole process will have to start\nfrom the very start.\n\nOleg",
            "date": "2003-12-10T01:46:23.000+0000",
            "id": 40
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg, \n \nin fact, this checked exception is caught and simply logged with LOG.error \n(see patched HttpMethodBase.responseBodyConsumed()). \n \nA simple solution would to be to remove this LOG.error(...) statement (just as \nin closeSocketAndStreams) - at least if WARN_EXTRA_INPUT is false \n \nIf you really wish that this potential IOException will not be triggered at \nall, I suggest an option to have the already discussed TEST_EXTRA_INPUT modes \n\"disabled\"/\"enabled and silent\"/\"enabled with logging\". \n \n \nChristian \n ",
            "date": "2003-12-10T21:08:48.000+0000",
            "id": 41
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "> in fact, this checked exception is caught and simply logged with LOG.error \n> (see patched HttpMethodBase.responseBodyConsumed()). \n\nChristian,\nUnfortunately I can't agree that this is just a matter of ignoring the said\nchecked exception. The problem is that there's no (or I personally do not know\nof a) reliable way to tell if the I/O exception is thrown due to a closed socket\nor due to a communication error. The former can be safely ignored but the latter\ncannot. Unless you know how to resolve this problem without resorting error\nmessage parsing, I persnally would rather see this check removed altogether.\n\nOleg",
            "date": "2003-12-10T21:17:22.000+0000",
            "id": 42
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg, \n \nit really does not matter what caused that IOException (no parsing needed). \nIf an IOException is thrown, the connection is not reusable. \n \nExcerpt from patched responseBodyConsumed(): \n \ntry { \n  if(responseConnection.isResponseAvailable()) { \n     (...) \n     setConnectionCloseForced(true); \n  } \n} catch (IOException e) { \n  LOG.error(\"Unexpected I/O error when testing for extra response data\", e); \n  setConnectionCloseForced(true); \n} \n ",
            "date": "2003-12-10T21:39:51.000+0000",
            "id": 43
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Maybe I am getting paranoid, but it still matters to me. I do not like the idea\nof just ignoring exceptions altogether, or putting a error/warning message for\nwhat is essentially a normal behaviour. \n\nFolks, do you think it is OK if we just ignored I/O exceptions in this\nsituation? Please let us know\n\nOleg",
            "date": "2003-12-10T21:58:46.000+0000",
            "id": 44
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Oleg, \n \nIMHO, if a specific thrown Exception is regarded as part of some \nnormal/tolerable behaviour, it is safe to ignore that Exception \n(even without logging). \n \nThis seems to be the case here! \nOur potential IOException is basically thrown by InputStream.available(), \nwhich means that there was a problem with retrieving the number of \nreadable bytes from the stream. \n \nThe exact reason for this problem does not matter. The IOException is \na reliable signal for HttpClient that the HTTP connection should not be \nreused. \n \nBy the way, the following two methods also silently ignore Exceptions. \nDo you think that this behaviour needs to be changed? \nHttpConnection.shutdownOutput() \nHttpConnection.closeSocketAndStreams() \n \n \nChristian \n ",
            "date": "2003-12-10T22:44:47.000+0000",
            "id": 45
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "> By the way, the following two methods also silently ignore Exceptions. \n> Do you think that this behaviour needs to be changed? \n\nIn both cases, I believe it is OK to ignore I/O exceptions. I would not mind\nseeing a warning in case of closeSocketAndStreams, though, but I can also live\nwithout one. Anyways, feel free to provide a patch.\n\nI do not mind checking in the patch with I/O exceptions silently ignored, if +1\nfrom at least one committer is secured.\n\nOleg",
            "date": "2003-12-10T23:04:43.000+0000",
            "id": 46
        },
        {
            "author": "Adrian Sutton",
            "body": ">I do not mind checking in the patch with I/O exceptions silently ignored, if +1\n>from at least one committer is secured.\n\nOleg,\nI would be -0 to silentlly ignoring exceptions.  That would be a -1 if I'd actually had time to follow \nHttpClient and do something about it myself.  I would suggest that if you expect the exception to \nhappen from time to time and can deal with it by just carrying on that at minimum you log the \nexception at debug level.  That way when people start seeing a problem with HttpClient, we'll tell \nthem to turn on debugging and that exception will become visible and they can then check that it's \nnot the cause of the problem.\n\nAdrian.",
            "date": "2003-12-11T06:25:51.000+0000",
            "id": 47
        },
        {
            "author": "Christian Kohlsch\u00c3\u00bctter",
            "body": "Adrian, \n \nthis is a wise (+1-worthy) solution.  \n \nChristian \n ",
            "date": "2003-12-11T15:26:49.000+0000",
            "id": 48
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch committed.\n\nOleg",
            "date": "2003-12-12T06:56:22.000+0000",
            "id": 49
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When fed with the wrong URL, for example http://localhost:19/ (chargen port),\nHttpClient will loop endlessly while attempting to read the status line.\n\nThis is caused by a bug in HttpMethodBase.readStatusLine(HttpState, HttpConnection)\n\n(while loop without any exceptional abort condition).\n\nwire log excerpt:\n\n2003/11/10 12:33:04:085 CET [DEBUG] HttpMethodDirector - -Execute loop try 1\n2003/11/10 12:33:04:312 CET [DEBUG] wire - ->> \"GET / HTTP/1.1[\\r][\\n]\"\n2003/11/10 12:33:04:351 CET [DEBUG] HttpMethodBase - -Adding Host request header\n2003/11/10 12:33:04:532 CET [DEBUG] wire - ->> \"User-Agent: Jakarta\nCommons-HttpClient[\\r][\\n]\"\n2003/11/10 12:33:04:554 CET [DEBUG] wire - ->> \"Host: localhost:19[\\r][\\n]\"\n2003/11/10 12:33:04:559 CET [DEBUG] wire - ->> \"[\\r][\\n]\"\n2003/11/10 12:33:04:639 CET [DEBUG] wire - -<<\n\"!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefgh[\\r][\\n]\"\n2003/11/10 12:33:04:669 CET [DEBUG] wire - -<<\n\"\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghi[\\r][\\n]\"\n2003/11/10 12:33:04:673 CET [DEBUG] wire - -<<\n\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghij[\\r][\\n]\"\n2003/11/10 12:33:04:692 CET [DEBUG] wire - -<<\n\"$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijk[\\r][\\n]\"\n2003/11/10 12:33:04:698 CET [DEBUG] wire - -<<\n\"%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijkl[\\r][\\n]\"\n2003/11/10 12:33:04:703 CET [DEBUG] wire - -<<\n\"&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklm[\\r][\\n]\"\n<snip>",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-295",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "HttpClient loops endlessly while trying to retrieve status line",
    "systemSpecification": "",
    "version": "Snapshot"
}